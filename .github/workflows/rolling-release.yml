name: Rolling Release

# This workflow runs CI checks once as a quality gate, then builds release artifacts
# and Docker images. Docker images are built on the same Linux AMD64 runner that 
# compiles the binary, eliminating the need for artifact downloads.

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  # Run CI checks first (lint, test) before building release
  ci:
    uses: ./.github/workflows/ci.yml

  build:
    name: Build
    needs: ci
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest  
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.goarch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Set version variables
      shell: bash
      run: |
        echo "VERSION=latest" >> $GITHUB_ENV
        echo "COMMIT=${GITHUB_SHA::7}" >> $GITHUB_ENV
        echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      shell: bash
      run: |
        output_name="feedspool"
        if [ "$GOOS" = "windows" ]; then
          output_name="feedspool.exe"
        fi
        
        go build \
          -ldflags "-X github.com/lmorchard/feedspool-go/cmd.Version=$VERSION -X github.com/lmorchard/feedspool-go/cmd.Commit=$COMMIT -X github.com/lmorchard/feedspool-go/cmd.Date=$DATE" \
          -o "$output_name" main.go

    - name: Create archive (Unix)
      if: matrix.goos != 'windows'
      shell: bash
      run: |
        archive_name="feedspool_${VERSION}_${{ matrix.goos }}_${{ matrix.goarch }}"
        tar -czf "${archive_name}.tar.gz" "feedspool"
        echo "ARCHIVE=${archive_name}.tar.gz" >> $GITHUB_ENV

    - name: Create archive (Windows)
      if: matrix.goos == 'windows'
      shell: powershell
      run: |
        $archive_name = "feedspool_$($env:VERSION)_${{ matrix.goos }}_${{ matrix.goarch }}"
        Compress-Archive -Path "feedspool.exe" -DestinationPath "${archive_name}.zip"
        echo "ARCHIVE=${archive_name}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARCHIVE }}
        path: ${{ env.ARCHIVE }}

    # Build Docker image on the Linux AMD64 runner
    - name: Verify binary for Docker build
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        echo "Files in current directory:"
        ls -la
        echo "Checking for feedspool binary:"
        if [ -f feedspool ]; then
          echo "✓ feedspool binary found"
          file feedspool
          ./feedspool version || echo "Binary test failed"
        else
          echo "✗ feedspool binary NOT found"
          exit 1
        fi

    - name: Set up Docker Buildx
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract Docker metadata
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: lmorchard/feedspool
        tags: |
          # Latest tag for rolling releases
          type=raw,value=latest
        labels: |
          org.opencontainers.image.title=feedspool
          org.opencontainers.image.description=RSS/Atom feed aggregator and static site generator
          org.opencontainers.image.vendor=lmorchard

    - name: Build and push Docker image
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.prebuilt
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  release:
    name: Create Rolling Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Delete existing latest tag and release
      run: |
        # Delete the tag locally and remotely if it exists
        git tag -d latest || true
        git push origin :refs/tags/latest || true
        
        # Delete the release if it exists
        gh release delete latest --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create new latest tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag latest
        git push origin latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Rolling Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: latest
        name: "Latest Development Build"
        body: |
          **⚠️ This is a pre-release development build ⚠️**
          
          This is an automated rolling release built from the latest commit on the main branch.
          
          **Commit:** ${{ github.sha }}
          **Build Date:** ${{ github.run_started_at }}
          
          This build may be unstable and is intended for testing purposes only.
          For stable releases, please use the numbered version releases.
        files: dist/*
        draft: false
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}